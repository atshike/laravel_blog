<?php

use Illuminate\Database\Seeder;

class ArticlesSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        //
        DB::table('articles')->insert(['title' => '连接Mysql', 'hit' => rand(0, 100), 'users_id' => '1', 'columns_id' => '9', 'create_time' => \Carbon\Carbon::now(), 'description' => '格式： mysql -h主机地址 -u用户名 －p用户密码<br><br><strong>1、连接到本机上的MYSQL。</strong><br>首先打开DOS窗口，然后进入目录mysql\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码。<br><br>如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;<br><br><strong>2、连接到远程主机上的MYSQL。</strong>假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：<br>mysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）<br><br><strong>3、退出MYSQL命令</strong>： exit （回车）',]);
        DB::table('articles')->insert(['title' => '修改密码', 'hit' => rand(0, 100), 'users_id' => '1', 'columns_id' => '9', 'create_time' => \Carbon\Carbon::now(), 'description' => '格式：mysqladmin -u用户名 -p旧密码 password 新密码<br><br><strong>1、给root加个密码ab12。</strong><br>首先在DOS下进入目录mysql\bin，然后键入以下命令<br>mysqladmin -u root -password ab12<br>注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。<br><br><strong>2、再将root的密码改为djg345。</strong><br>mysqladmin -u root -p ab12 password djg345',]);
        DB::table('articles')->insert(['title' => '增加新用户', 'hit' => rand(0, 100), 'users_id' => '1', 'columns_id' => '9', 'create_time' => \Carbon\Carbon::now(), 'description' => '注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符<br><br>格式：grant select on 数据库.* to 用户名@登录主机 identified by &ldquo;密码&rdquo;<br><br><strong>1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：</strong><br>grant select,insert,update,delete on *.* to [email=test1@&rdquo;%]test1@&rdquo;%[/email]&rdquo; Identified by &ldquo;abc&rdquo;;<br><br>但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。<br><br><strong>2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机）</strong>，这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。<br>grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by &ldquo;abc&rdquo;;<br><br>如果你不想test2有密码，可以再打一个命令将密码消掉。<br>grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by &ldquo;&rdquo;;',]);
        DB::table('articles')->insert(['title' => '创建数据库', 'hit' => rand(0, 100), 'users_id' => '1', 'columns_id' => '9', 'create_time' => \Carbon\Carbon::now(), 'description' => '<h1 align="center">创建数据库</h1><div id="comment">注意：创建数据库之前要先连接Mysql服务器<br><br>命令：create database &lt;数据库名&gt;<br><br><strong>例1：建立一个名为xhkdb的数据库</strong><br>mysql&gt; create database xhkdb;<br><br><strong>例2：创建数据库并分配用户</strong><br><br>①CREATE DATABASE 数据库名;<br><br>②GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON 数据库名.* TO 数据库名@localhost IDENTIFIED BY \'密码\';<br><br>③SET PASSWORD FOR \'数据库名\'@\'localhost\' = OLD_PASSWORD(\'密码\');<br><br>依次执行3个命令完成数据库创建。注意：中文 &ldquo;密码&rdquo;和&ldquo;数据库&rdquo;是户自己需要设置的。</div><div><h1 align="center"> 显示数据库</h1><div id="comment">命令：show databases （注意：最后有个s）<br>mysql&gt; show databases;<br><br>注意：为了不再显示的时候乱码，要修改数据库默认编码。以下以GBK编码页面为例进行说明：<br><br><strong>1、修改MYSQL的配置文件：</strong>my.ini里面修改default-character-set=gbk<br><strong>2、代码运行时修改：</strong><br>①Java代码：jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=gbk<br>②PHP代码：header("Content-Type:text/html;charset=gb2312");<br>③C语言代码：int mysql_set_character_set( MYSQL * mysql, char * csname)；<br>该函数用于为当前连接设置默认的字符集。字符串csname指定了1个有效的字符集名称。连接校对成为字符集的默认校对。该函数的工作方式与SET NAMES语句类似，但它还能设置mysql- &gt; charset的值，从而影响了由mysql_real_escape_string() 设置的字符集。</div><div><h1 align="center">删除数据库</h1><div id="comment">命令：drop database &lt;数据库名&gt;<br>例如：删除名为 xhkdb的数据库<br>mysql&gt; drop database xhkdb;<br><br>例子1：删除一个已经确定存在的数据库<br>mysql&gt; drop database drop_database;<br>Query OK, 0 rows affected (0.00 sec)<br><br>例子2：删除一个不确定存在的数据库<br>mysql&gt; drop database drop_database;<br>ERROR 1008 (HY000): Can\'t drop database \'drop_database\'; database doesn\'t exist<br>//发生错误，不能删除\'drop_database\'数据库，该数据库不存在。<br>mysql&gt; drop database if exists drop_database;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)//产生一个警告说明此数据库不存在<br>mysql&gt; create database drop_database;<br>Query OK, 1 row affected (0.00 sec)<br>mysql&gt; drop database if exists drop_database;//if exists 判断数据库是否存在，不存在也不产生错误<br>Query OK, 0 rows affected (0.00 sec)</div><div><h1 align="center">连接数据库</h1><div id="comment">命令： use &lt;数据库名&gt;<br><br>例如：如果xhkdb数据库存在，尝试存取它：<br>mysql&gt; use xhkdb;<br>屏幕提示：Database changed<br><br><strong>use 语句可以通告MySQL把db_name数据库作为默认（当前）数据库使用，用于后续语句。</strong>该数据库保持为默认数据库，直到语段的结尾，或者直到发布一个不同的USE语句：<br>mysql&gt; USE db1;<br>mysql&gt; SELECT COUNT(*) FROM mytable;   # selects from db1.mytable<br>mysql&gt; USE db2;<br>mysql&gt; SELECT COUNT(*) FROM mytable;   # selects from db2.mytable<br><br><strong>使用USE语句为一个特定的当前的数据库做标记，不会阻碍您访问其它数据库中的表。</strong>下面的例子可以从db1数据库访问作者表，并从db2数据库访问编辑表：<br>mysql&gt; USE db1;<br>mysql&gt; SELECT author_name,editor_name FROM author,db2.editor<br>-&gt;        WHERE author.editor_id = db2.editor.editor_id;<br><br>USE语句被设立出来，用于与Sybase相兼容。<br><br>有些网友问到，连接以后怎么退出。其实，不用退出来，use 数据库后，使用show databases就能查询所有数据库，如果想跳到其他数据库，用<br>use 其他数据库名字<br>就可以了。</div></div></div></div>',]);
        DB::table('articles')->insert(['title' => '创建数据表', 'hit' => rand(0, 100), 'users_id' => '1', 'columns_id' => '9', 'create_time' => \Carbon\Carbon::now(), 'description' => '<h1 align="center">创建数据表</h1><div id="comment">命令：create table &lt;表名&gt; ( &lt;字段名1&gt; &lt;类型1&gt; [,..&lt;字段名n&gt; &lt;类型n&gt;]);<br><br>例如，建立一个名为MyClass的表，<br><table border="0" cellspacing="0" cellpadding="0"><tbody><tr><td>字段名</td><td>数字类型</td><td>数据宽度</td><td>是否为空</td><td>是否主键</td><td>自动增加</td><td>默认值</td></tr><tr><td>id</td><td>int</td><td>4</td><td>否</td><td>primary key</td><td>auto_increment</td><td> </td></tr><tr><td>name</td><td>char</td><td>20</td><td>否</td><td> </td><td> </td><td> </td></tr><tr><td>sex</td><td>int</td><td>4</td><td>否</td><td> </td><td> </td><td>0</td></tr><tr><td>degree</td><td>double</td><td>16</td><td>是</td><td> </td><td> </td><td> </td></tr></tbody></table><br>mysql&gt; <strong>create</strong> <strong>table</strong> MyClass(<br>&gt; id int(4) not null <strong>primary key auto_increment</strong>,<br>&gt; name char(20) not null,<br>&gt; sex int(4) not null<strong> default</strong> \'0\',<br>&gt; degree double(16,2));</div><div><h1 align="center">删除数据表</h1><div id="comment">命令：drop table &lt;表名&gt;<br><br>例如：删除表名为 MyClass 的表<br>mysql&gt; drop table MyClass;<br><br>DROP TABLE用于取消一个或多个表。您必须有每个表的DROP权限。所有的表数据和表定义会被取消，所以使用本语句要小心！<br><br>注意：对于一个带分区的表，DROP TABLE会永久性地取消表定义，取消各分区，并取消储存在这些分区中的所有数据。DROP TABLE还会取消与被取消的表有关联的分区定义（.par）文件。<br><br>对与不存在的表，使用IF EXISTS用于防止错误发生。当使用IF EXISTS时，对于每个不存在的表，会生成一个NOTE。<br><br>RESTRICT和CASCADE可以使分区更容易。目前，RESTRICT和CASCADE不起作用。</div><div><h1 align="center">表插入数据</h1><div id="comment">命令：insert into &lt;表名&gt; [( &lt;字段名1&gt;[,..&lt;字段名n &gt; ])] values ( 值1 )[, ( 值n )]<br><br>例如：往表 MyClass中插入二条记录, 这二条记录表示：编号为1的名为Tom的成绩为96.45, 编号为2 的名为Joan 的成绩为82.99， 编号为3 的名为Wang 的成绩为96.5。<br>mysql&gt; insert into MyClass values(1,\'Tom\',96.45),(2,\'Joan\',82.99), (2,\'Wang\', 96.59);<br><br>注意：insert into每次只能向表中插入一条记录。</div><div><h1 align="center">查询表中的数据</h1><div id="comment"><strong>1)、查询所有行</strong><br>命令： select &lt;字段1，字段2，...&gt; from &lt; 表名 &gt; where &lt; 表达式 &gt;<br>例如：查看表 MyClass 中所有数据<br>mysql&gt; select * from MyClass;<br><br><strong>2）、查询前几行数据</strong><br>例如：查看表 MyClass 中前2行数据<br>mysql&gt; select * from MyClass order by id limit 0,2;<br><br>select一般配合where使用，以查询更精确更复杂的数据。</div><div><h1 align="center">删除表中数据</h1><div> </div><div> </div><div> </div><div id="comment">命令：delete from 表名 where 表达式<br><br>例如：删除表 MyClass中编号为1 的记录<br>mysql&gt; delete from MyClass where id=1;<br><br>下面是一个删除数据前后表的对比。<br><table><tbody><tr><th>FirstName</th><th>LastName</th><th>Age</th></tr><tr><td>Peter</td><td>Griffin</td><td>35</td></tr><tr><td>Glenn</td><td>Quagmire</td><td>33</td></tr></tbody></table><br>下面以PHP代码为例删除 "Persons" 表中所有 LastName=\'Griffin\' 的记录：<br><pre>&lt;?php      $con = mysql_connect("localhost","peter","abc123");      if (!$con)      {        die(\'Could not connect: \' . mysql_error());      }      mysql_select_db("my_db", $con);      mysql_query("DELETE FROM Persons WHERE LastName=\'Griffin\'"); mysql_close($con);   ?&gt;</pre>在这次删除之后，表是这样的：<br><table><tbody><tr><th>FirstName</th><th>LastName</th><th>Age</th></tr><tr><td>Glenn</td><td>Quagmire</td><td>33<br><br></td></tr></tbody></table><h1 align="center">修改表中数据</h1><div id="comment">语法：update 表名 set 字段=新值,… where 条件<br>mysql&gt; update MyClass set name=\'Mary\' where id=1;<br><br><strong>例子1：单表的MySQL UPDATE语句：</strong><br>UPDATE [LOW_PRIORITY] [IGNORE] tbl_name SET col_name1=expr1 [, col_name2=expr2 ...] [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]<br><br><strong>例子2：多表的UPDATE语句：</strong><br>UPDATE [LOW_PRIORITY] [IGNORE] table_references SET col_name1=expr1 [, col_name2=expr2 ...] [WHERE where_definition]<br><br>UPDATE语法可以用新值更新原有表行中的各列。SET子句指示要修改哪些列和要给予哪些值。WHERE子句指定应更新哪些行。如果没有WHERE子句，则更新所有的行。如果指定了ORDER BY子句，则按照被指定的顺序对行进行更新。LIMIT子句用于给定一个限值，限制可以被更新的行的数目。</div></div></div></div></div></div>',]);
        DB::table('articles')->insert(['title' => '备份数据库', 'hit' => rand(0, 100), 'users_id' => '1', 'columns_id' => '9', 'create_time' => \Carbon\Carbon::now(), 'description' => '命令在DOS的[url=file://\\mysql\\bin]\\mysql\\bin[/url]目录下执行<br><br><strong>1.导出整个数据库</strong><br>导出文件默认是存在mysql\bin目录下<br>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名<br>mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql<br><br><strong>2.导出一个表</strong><br>mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名<br>mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql<br><br><strong>3.导出一个数据库结构</strong><br>mysqldump -u user_name -p -d –add-drop-table database_name &gt; outfile_name.sql<br>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table<br><br><strong>4.带语言参数导出</strong><br>mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile_name.sql<br><br>例如，将aaa库备份到文件back_aaa中：<br>[root@test1 root]# cd　/home/data/mysql<br>[root@test1 mysql]# mysqldump -u root -p --opt aaa &gt; back_aaa',]);
        DB::table('articles')->insert(['title' => 'laravel_安装', 'hit' => rand(0, 100), 'users_id' => '1', 'columns_id' => '8', 'create_time' => \Carbon\Carbon::now(), 'description' => '<p>php.ini 启用  php_openssl.dll</p><p>&nbsp;</p><p>CA证书</p><p>php.ini 加  openssl.cafile= &quot;D:\phpStudy\php55n\cacert.pem&quot;<br>cacert.pem下载地址：https://curl.haxx.se/docs/caextract.html</p><p>&nbsp;</p><p>关闭错误：composer config -g -- disable-tls true</p><p>&nbsp;</p><p>启用镜像服务：<br>系统全局配置： composer config -g repo.packagist composer https://packagist.phpcomposer.com</p>',]);
        DB::table('articles')->insert(['title' => 'laravel_数据库查询', 'hit' => rand(0, 100), 'users_id' => '1', 'columns_id' => '8', 'create_time' => \Carbon\Carbon::now(), 'description' => '<p></p><p>从一张表中取出所有行<br></p><p> -&gt;get();</p><p>&nbsp;</p><p>foreach ...<br></p><p>------------------------------------------------------------------------<br></p><p>从一张表中获取一行/一列<br></p><p> -&gt;first();<br></p><p>&nbsp;</p><p>获取单个值</p><p> -&gt;value(\'email\');</p><p>&nbsp;</p><p>&nbsp;</p><p>获取包含单个列值的数组</p><p> -&gt;lists(\'title\');<br></p><p>foreach ...</p><p>&nbsp;</p><p>--------------------------------------------------------------<br></p><p>排序<br></p><p>-&gt;orderBy(\'name\', \'desc\')<br>-&gt;get();<br></p>',]);
        DB::table('articles')->insert([
            'title' => 'laravel_excel导出',
            'users_id' => '1',
            'columns_id' => '8',
            'create_time' => \Carbon\Carbon::now(),
            'description' => '<p>composer.json<br><br>&quot;maatwebsite/excel&quot;: &quot;~2.0.0&quot;,<br><br>composer update</p><p>------------------------------------------------<br></p><p>config/app.php<br></p><p> \'providers\' =&gt; [<br><br>Maatwebsite\Excel\ExcelServiceProvider::class,</p><p> ]</p><p>&nbsp;</p><p> \'aliases\' =&gt; [</p><p> \'Excel\' =&gt; Maatwebsite\Excel\Facades\Excel::class,</p><p>&nbsp;</p><p> ],<br></p><p>------------------------------------------------<br></p><p>ExcelController.php<br></p><p>&lt;?php</p><p>namespace App\Http\Controllers;<br>use Illuminate\Http\Request;<br>use App\Http\Requests;<br>use App\Http\Controllers\Controller;<br>use Excel;<br>use App\Article;</p><p>class ExcelController extends Controller<br>{<br>//Excel文件导出功能<br>public function export(){</p><p> $filename=\'考勤\'.date(\'Ymd-His\');</p><p> Excel::create($filename, function($excel) {<br>$excel-&gt;sheet(\'SheetnameLee\', function($sheet) {<br>$sheet-&gt;prependRow(1, array(<br>\'序号\', \'作者\', \'标题\', \'内容\'<br>));<br>$sheet-&gt;setSize(array(<br>\'A1\' =&gt; array(<br>\'width\'     =&gt; 30,<br>\'height\'    =&gt; 20<br>)<br>)); <br>$articles = Article::get();<br>foreach ($articles as $i=&gt;$articles){<br>$sheet-&gt;row($i+2, array(<br>$articles-&gt;id, $articles-&gt;employee-&gt;employee_no,$articles-&gt;title, $articles-&gt;content<br>));<br>}<br>}); <br>})-&gt;export(\'csv\');<br>}<br>}<br></p>',
        ]);
        DB::table('articles')->insert([
            'title' => 'laravel_rote登录验证',
            'users_id' => '1',
            'columns_id' => '8',
            'create_time' => \Carbon\Carbon::now(),
            'description' => '<p><br>//登录验证 \'middleware\' =&gt; \'auth\'</p><p>Route::group([\'prefix\' =&gt; \'admin\', \'namespace\' =&gt; \'Admin\', \'middleware\' =&gt; \'auth\'], function()<br>{<br>Route::get(\'/\', \'AdminHomeController@index\');<br>Route::resource(\'pages\', \'PagesController\');<br>});</p>',
        ]);

        DB::table('articles')->insert([
            'title' => 'JS radio 点击显示/隐藏',
            'users_id' => '1',
            'columns_id' => '6',
            'create_time' => \Carbon\Carbon::now(),
            'description' => '<p>//JS radio 点击显示/隐藏</p><p>&lt;input type=&quot;radio&quot; name=&quot;field_type&quot; value=&quot;input&quot; checked onclick=&quot;showTr()&quot;&gt;input<br>&lt;input type=&quot;radio&quot; name=&quot;field_type&quot; value=&quot;textarea&quot; checked onclick=&quot;showTr()&quot;&gt;textarea<br>&lt;input type=&quot;radio&quot; name=&quot;field_type&quot; value=&quot;radio&quot; checked onclick=&quot;showTr()&quot;&gt;radio</p><p>&lt;script&gt;<br>showTr();<br>function showTr(){<br>var type = $(\'input[name=field_type]:checked\').val();<br>if(type == \'radio\'){<br>$(\'.field_value\').show();<br>}else{<br>$(\'.field_value\').hide();<br>}</p><p> }<br>&lt;/script&gt;</p>',
        ]);

        DB::table('articles')->insert([
            'title' => 'ajax_post',
            'users_id' => '1',
            'columns_id' => '6',
            'create_time' => \Carbon\Carbon::now(),
            'description' => ' &lt;script&gt;<br>function del(id) {<br>if(window.confirm(\'你确定要删除吗？\')){<br>$.post(&quot;{{url(\'/admin/deltarticle\')}}/&quot; + id, {<br>\'_method\': \'delete\',<br>\'_token\': &quot;{{csrf_token()}}&quot;,<br>\'id\': id<br>}, function (data) {<br>if (data.status == 0) {<br>location.href = location.href;<br>alert(data.msg);<br>} else {<br>alert(data.msg);<br>}<br>});<br>}else{<br>return false;<br>}<br>}<br>&lt;/script&gt;',
        ]);

        /*
        DB::table('articles')->insert([
        'title' => 'test',
        'users_id' => '1',
        'columns_id' => '8',
        'description' => 'This is description',
        ]);
        */
    }
}
